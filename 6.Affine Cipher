#include <stdio.h>

// Function to calculate the GCD of two numbers
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to find modular inverse of a mod m
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1; // Modular inverse does not exist
}

int main() {
    int a, b;
    int found = 0;

    // Ciphertext mappings
    int index_M1 = 1; // Index of 'B'
    int index_E = 4;  // Index of 'E'
    int index_M2 = 20; // Index of 'U'
    int index_T = 19;  // Index of 'T'

    for (a = 1; a < 26; a++) {
        if (gcd(a, 26) == 1) { // a must be coprime with 26
            int a_inv = modInverse(a, 26);
            if (a_inv != -1) {
                for (b = 0; b < 26; b++) {
                    if ((a * index_E + b) % 26 == index_M1 && (a * index_T + b) % 26 == index_M2) {
                        printf("Possible values for a and b are: a = %d, b = %d\n", a, b);
                        found = 1;
                    }
                }
            }
        }
    }

    if (!found) {
        printf("No valid (a, b) pair found.\n");
    }

    return 0;
}
